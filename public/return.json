[
    {
        "Name": "patrick.cartlidge@digital.cabinet-office.gov.uk",
        "JobFamily": "Technical",
        "Role": "Frontend developer",
        "RoleLevel": "Frontend developer",
        "Skills": "{\"Systems integration (Frontend developer)\":{\"Comments\":\"When contributing new features or improvements to GOV.UK, I always make sure to do thorough testing. Whether this is making sure the test coverage of an application will cover the changes I have made or deploying changes I have to integration environments so I can see them in context. \",\"Score\":\"2\",\"Evidence\":\"As part of work on GOV.UK, I have had to deploy applications to integration environments for testing purposes. I have worked on the Emergency Banner which required changes to a chain of different applications which then all needed to be deployed simultaneously in order to test the changes I was making. I also had to provide assistance to other developers who were testing it as part of the review process. In addition I collaborated with other developers to determine the least disruptive way of deploying the changes to the applications it affected. I took responsibility for deploying my changes to production. This involved making a new release of the components gem and updating the dependency on the static application and deploying it to production. My work on the navbar also required me to deploy multiple applications to multiple environments to test my changes. \\n\\nHave made contributions to govuk_publishing_components. This included moving the Emergency Banner, updating the navigation bar and adding new Youtube embed functionality to the image card. These required me to; write new documentation for the additional functionality, add new tests and update existing tests to ensure adequate coverage; and accessibility test the components isolated and in context with occasional consultation with an accessibility specialist.\\n\\nWas able to diagnose a longstanding randomly failing test and fix it. Noticed that the “displays the person page” test would fail in govuk_publishing_components randomly. This was because the test was checking if an array was nil or undefined but not if it was empty. As a result an empty array would pass the check and the test would attempt to run on an empty array which would cause a test failure. This occurred because the code generating random test data could generate an object with an empty array attribute. As the generated random object would not have an empty array attribute in production (the array attribute would not be assigned), I fixed the test by adding an extra check so the test would not run if the array was empty.\\n\\nHave successfully completed shadowing and two shifts of secondary second line. Needed to SSH into remote servers in order to resolve issues. Worked together with another developer on shift to resolve a Whitehall publishing issue raised on Zendesk.\\n\\nAs part of my research on improving performance on GOV.UK, I conducted integration tests to check the performance of my proposed changes. When I spiked into using .webp images, I integrated my changes into a prototype of the frontend application if it used .webp images instead of .jpg images. This involved batch converting all the images and all image references. In my research into using ES6 modules in govuk_publishing_components, I also implemented a prototype. This involved converting component JS into individual modules and modifying an application’s application.js to stop importing component JS from the gem.\"},\"Systems design (Frontend developer)\":{\"Comments\":\"During my time at GDS, I often have to translate design specifications to implementation. Design specification can come in several forms; Figma is frequently used by designers to convey what they want the feature to resemble; spreadsheets are used by analysts for specifying the structure of click events; and content for a new feature is generally presented in a document. Whenever I am assigned a task and I encounter technical debt, I always ensure that I implement the task in a way that reduces debt.\",\"Evidence\":\"When adding a promo banner to the frontend app, I noticed that the banner was hardcoded in separate partials which all used the same mark-up. So I moved the content to a .yml file and created one partial that could be used for a promo by all pages. This means the next time a new promo has to be added to a page, all that needs to be done is updating the .yml. This simplifies future updates and makes the application more maintainable.\\n\\nWhen changing how errors were displayed on the location form in frontend, I saw instances of duplicated code. As well as changing how the errors were displayed, I also was able to merge templates together and delete repeated code (rather than put the error message on all the partials without consolidating functionality). By combining different instances of the same form together it means that one partial only needs to be changed. This means there’s no risk of a new update to the form not being applied to everywhere it appears on the site.\\n\\nWhen I had to move the header component outside of the main section of manual pages, I noticed that there was a lot of duplication. There were two types of manual pages and each had their own set of partials even though the layouts and styling were similar. To avoid continuing technical debt, I made a new header component for both types of manual. I then went further and split the common mark-up into layout partials for both types of manual. This means future changes to both types of manual will be more straightforward as only a layout partial or header component needs to be updated.\\n\\nMultiple improvements to the navbar such as reducing the dropdown menus to a single menu instead of two separate menus, using the same dropdown menu on mobile and desktop viewports and making the positioning relative instead of absolute resulting in the removal of hundreds of lines of code. These changes were specified in Figma designs, which I translated into code. As these changes affected all of GOV.UK, I needed to thoroughly test how the navbar integrated into several frontend applications. \\n\\nCreated a Cost of Living banner which was displayed on the homepage and built the Cost of Living topical page. Took Figma Designs and Content Design Documents and used them to build the component.\\nTracking changes throughout GOV.UK including adjustments to; the accordions, the footer links and the sitewide navbar. These changes were based on a document written by the team user analyst and I had to translate that to the changes needed to be made to the application.\\n\\nImplemented several changes to the No. 10 Organisation Page which were specified in Figma designs. Worked with the designer to determine which design would be most achievable in the time we had. Also implemented Youtube Embed for the image card. Had to extend an existing component to use this new feature, wrote new tests and accessibility tested it. Collaborated with the designer in the specification phase to determine an accessible solution.\",\"Score\":\"2\"},\"Prototyping\":{\"Score\":\"2\",\"Evidence\":\"Improvements to the navbar include reducing the dropdown menus to a single menu instead of two separate menus, using the same dropdown menu on mobile and desktop viewports and making the positioning relative instead of absolute resulting in the removal of hundreds of lines of CSS and JS. This is part of an on-going iteration of the navbar to increase the click rate of links in the navbar. User research found that one button was more intuitive than two buttons. The results of this change were also researched and it was found that it resulted in an increase of clicks on links on mobile and an increase of clicks on Topic links on desktop. However it resulted in a decrease of clicks in other areas, so the navbar will be iterated upon again in the future to see how we can improve click rate.\\n\\nChanges to the Browse Pages. These were part of the iteration on Topic pages to make GOV.UK easier to browse without having to use a search engine. The topic pages were designed as a result of user feedback and their design was tested in an A/B test which I worked on. Eventually we determined which layout was the most liked and so we implemented that layout as the current one. In the future these pages will be iterated upon again as a result of user feedback.\\n\\nWhen working on features and changes on GOV.UK, I use prototypes of my work to get feedback from designers. For visual changes to components I present designers with Heroku deployments so that they can see the changes isolated on a component. To show them changes in context of the website, I will deploy changes to the integration environment so that they can better show how the proposed changes fit into the entire page layout. \\n\\nWhilst I was on the Emergency Alerts global bar deployment team, we went with a prototyping first approach rather than a design first approach. Any changes that the designer proposed I deployed to the integration environment. This led to changes in the design that were only agreed upon because of this rapid prototyping.\\nAs part of Firebreak, I worked with a team of colleagues to put together a prototype for adding a new feature to the Electoral Office location finder tool. This feature was a section of the page to let the user know if there was an upcoming election in the region of the Electoral Office.\\n\\nAs part of my research on improving performance on GOV.UK, I conducted integration tests to check the performance of my proposed changes. When I spiked into using .webp images, I integrated my changes into a prototype of the frontend application if it used .webp images instead of .jpg images. This involved batch converting all the images and all image references. In my research into using ES6 modules in govuk_publishing_components, I also implemented a prototype. This involved converting component JS into individual modules and modifying an application’s application.js to stop importing component JS from the gem.\",\"Comments\":\"I see prototyping as a key part of any project and have had to build several during my time at GDS. Whenever I am working on a new feature derived from a design, I always present what I have implemented to the designer for any feedback. I have also been involved in implementing iterative improvements to aspects of GOV.UK as a result of user research. In addition I have constructed prototypes when doing research on ways to improve performance on GOV.UK so that I can ascertain how significant the improvements I am making are.\"},\"Community collaboration (Frontend developer)\":{\"Score\":\"3\",\"Evidence\":\"Contributed many fixes and new features to ‘govuk_publishing_components’ gem (which is used on all GOV.UK frontend rendering applications); moved the Emergency Banner component from the static application to the gem; added Youtube Embed functionality for the image card; improvements to the navbar including reducing the dropdown menus to a single menu instead of two separate menus, using the same dropdown menu on mobile and desktop viewports and making the positioning relative instead of absolute.\\n\\nContributed a set of responsive spacing classes to govuk-frontend package. This was released and is now usable on any application using govuk-frontend.\\n\\nSpiked into how we could use modern techniques to build JS in GOV.UK Publishing Components. It involved independent research but also consulting members of the frontend community. I talked to experienced developers about how JS is currently used on GOV.UK, consulted a frontend developer who previously did research into alternate JS build methods and discussed with a Design System Frontend Developer about the compatibility of their proposed changes to the Design System and my own proposed changes to govuk_publishing_components. The work ties into discussions the community had been having about how to move our Javascript away from supporting IE11 and using more modern features.\\nSpiked into how we could use .webp image formats on GOV.UK. This is a modern image format that results in images of much smaller sizes without much loss in image quality. Investigated the performance benefits of webp and created a document of my findings.\\n\\nHave given talks about work I have done on GOV.UK Publishing Components. I talked about the navbar in the GOV.UK Show and Tell. I also talked about the Youtube Embed in the Image Card Component in the GOV.UK Frontenders Community meeting. This was to inform everyone of what I had learned in the process of building this feature and how they could use the new feature I had made. In addition I talked about my investigation into using ES6 modules in govuk_publishing_components in the GOV.UK Tech Fortnightly. This was to inform the wider tech community about what we could do if we did not need to support IE11 and how we could adopt more modern web practices.\\n\\nHave helped other developers not as experienced with Ruby. I have the most Ruby experience of the Frontend developers on my team and have been able to answer questions that others have asked.\\nCollaborated with Designers to create a new process to raise bugs with govuk_publishing_components by using GitHub issues. Several issues raised as a result of this process have been triaged and worked upon by myself and other developers.\\n\\nTalked to students who were on work experience at GDS from the EY foundation. We discussed what frontend development is and what a typical day of GDS is like. They also asked questions about my career history and my advice for how they could get into the tech industry.\",\"Comments\":\"I have gone above and beyond with my contributions to the wider GOV.UK frontend community. Have worked on many projects that have site-wide implications, have done research into ways that we can improve GOV.UK as a whole and contributed to discussions about how we can improve processes and standards. I have also presented several talks to audiences in the wider GOV.UK team with different levels of frontend knowledge.\"},\"Modern standards approach (Frontend developer)\":{\"Score\":\"2\",\"Evidence\":\"Spiked into how we could use modules in the govuk_publishing_components library to improve performance by decreasing JS size. Devised a new solution in which instead of all the JS for an application being loaded on every page, the JS is embedded in each component partial. As a result the JS for a component is only loaded when a component is used on the page which results in a smaller amount of JS needing to be downloaded on every page on GOV.UK. To test the performance I built a prototype with the changes I made. The prototype involved converting component JS into individual modules and modifying an application’s application.js to stop importing component JS from the gem. Using the Chrome Network tab on a page I could see that application.js size is halved when using individual JS files and the coverage (the amount of JS used) of application.js increasing from 13.5%. \\n\\nSpiked into how we could use .webp image formats on GOV.UK. This is a modern image format that results in images of much smaller sizes than .png or .jpeg without much loss in image quality. Implemented a prototype of the frontend application if it used .webp images instead of .jpg images. This involved batch converting all the images on frontend and changing all references to them in the code. I then created a spreadsheet which compared the size of each image before and after compression and calculated the average percentage reduction in file size. Additionally ran comparisons on how fast a page with images loaded in the currently deployed version of GOV.UK using the Network tab of Google Chrome. I also experimented with Github actions to nightly submit PRs of compressed images that had been committed or amend PRs that had been opened by a user with images in it that could be compressed further.\\n\\nWhen adding a promo banner to pages in the frontend app, I noticed that the content of the banner was hardcoded in separate partials all using the same mark-up. Therefore I moved the content to a .yml file and created one partial that could be used by all pages. This means the next time a promo has to be added, all that needs to be done is updating the .yml. \\n\\nWhen changing how errors were displayed on the location form in frontend, I saw instances of duplicated code over several templates. I merged templates and deleted repeated code (rather than putting the error message on the existing partials without consolidating functionality). \\n\\nWhen I had to move the header component outside of the main section of manual pages, I noticed that there was a lot of duplication. Instead of moving the component on all the templates it appeared on, I consolidated the code common to all partials thus making the pages more maintainable.\",\"Comments\":\"GOV.UK has to use a technology stack that works with as many browsers as possible and so this means in the past we haven’t been able to use much in the way of contemporary frontend technology. However in light of discussions to reduce IE11 support, I have done extensive research into ways we can employ modern technology into GOV.UK with my spikes into .webp images and ES6 modules. In addition when working on new features or updates, I always make an effort to reduce tech debt and make our code more maintainable. Maintainable code is an important standard for any actively updated codebase and makes future updates by other developers more straightforward. \"},\"Programming and build (Frontend developer)\":{\"Evidence\":\"Moved the Emergency Banner component from an application to the govuk_publishing_components gem. This involved creating a new component with appropriate testing, documentation and accessibility checking. Collaborated with other developers to determine the least disruptive way of deploying the changes to the applications it affected.\\n\\nImplemented Youtube Embed for the image card as part of No. 10 Organisation work. Had to extend an existing component to use this new feature, wrote new tests and accessibility tested it. Collaborated with the designer in specification phase to determine an accessible solution that could be delivered in a tight deadline. \\nMultiple improvements to the navbar such as reducing the dropdown menus to a single menu instead of two separate menus, using the same dropdown menu on mobile and desktop viewports and making the positioning relative instead of absolute resulting in the removal of hundreds of lines of CSS and JS. These changes were specified in Figma designs, which I then had to use to make the changes. As these changes affected all of GOV.UK, I needed to do thorough testing of how the navbar was integrated into several frontend applications. \\n\\nImplemented a banner for Photo ID on several pages in collections. Reworked the existing implementation of the promo banner in the collections application which involved separate partials for different banner content. Reimplemented the promo banner to use one partial and to take content from .yml files, which makes the partial reusable, translatable and easier to change by non-frontend developers.\\n\\nModified the global bar in advance of an awareness campaign for the Emergency Alert tests. Worked closely with a designer to draft several prototypes which determined the final design. \\n\\nCreated a Cost of Living banner which was displayed on the homepage, linked to the Cost of Living topical page and built the Cost of Living topical page. I had to take Figma Designs and Content Design Documents and take them into account to build the component.\\n\\nTracking changes throughout GOV.UK including adjustments to the accordions, adjustments to the footer links and adjustments to the sitewide navbar. These changes were based on a document written by the team user analyst and I had to translate that to the changes needed to be made to the application.\\n\\nAssorted improvements to the various applications that my team is responsible for. Removed accordions from Browse pages, changed how errors were displayed on the location form in frontend and added promo banner to pages in the frontend app. When implementing each of these new features, I ensured that the partials could be consolidated whenever possible in order to reduce tech debt and make applications more maintainable. \",\"Comments\":\"I think a 3 is justified because of the quality and quantity of work I have delivered over the past year. I have delivered new features as part of my team’s objectives, maintained existing code and contributed fixes to community owned projects. Many of the features I have delivered have effected all pages on GOV.UK. My implementation skills are recognised on GOV.UK by managers and my reputation for quickly implemented yet high quality code has also meant that I have been drafted into urgent response teams as the lead frontend developer. For these teams I was able to deliver the work before the deadline.\",\"Score\":\"3\"},\"User focus\":{\"Comments\":\"In my team, I have advocated for user needs by devising the Frontend Checklist which integrates accessibility testing with the tools used by our users into our build processes. I have also been able to advise designers on how to make their designs more accessible and so easier to use by our users. In addition I have been involved in user research sessions so I can learn more about how people use GOV.UK which will mean I can make more informed decisions going forward.\",\"Score\":\"2\",\"Evidence\":\"When I was working on the No. 10 Organisation page, I advocated for a more accessible design based on how users would be using the page. I advised the interaction designer that the link should not resemble a button for the subscription link component restyle. This is because it poses an accessibility issue as a user would click it expecting it to behave a certain way (a button generally toggles something on a page) and instead it would perform a different action (a link to another page). In addition, I came up with a solution on how to make the Youtube Embed functionality on the Image Card more accessible. I knew that there was no focus style for images on GOV.UK, so if the Youtube embed did not load and the thumbnail link fallback was visible then a user using a keyboard would not be able to see if they had the link to the Youtube video in focus. So therefore I proposed that as well as the thumbnail, we displayed the alt-text which could have the focus styles applied to it when the user focused the thumbnail.\\n\\nParticipated as an observer in a user research session about the navbar structure with a member of the public. The user was asked about how they would categorize pages on GOV.UK and how they would name those categories. They were also asked about the existing two categories of pages in navbar and how intuitive they thought the grouping was. This research will go on to inform future restructuring of the content of the navbar.\\n\\nParticipated as a notetaker for 3 user research sessions about the page level navigation and email subscription. The user was given 3 scenarios, each scenario with a different page design. They were asked to locate information on the pages based on the scenarios given. The research will go on to inform future design changes to page level navigation and how users subscribe to get email notifications.\\n\\nDevised a Frontend Checklist with my team which we use to test the accessibility of every new component or feature. The checklist includes assistive technology used by our users, accessibility checking tools and different devices and operating systems.\"},\"Communicating information\":{\"Comments\":\"I have been a part of projects in which the communication of information was vital to delivering on time. These projects required me to work together with a team of colleagues with different disciplines and areas of GOV.UK, discuss delivery plans with senior stakeholders and determine the delivery approach of the project. In addition I have given several talks to audiences with different levels of technical expertise.\",\"Score\":\"3\",\"Evidence\":\"Have been drafted into multiple urgent response teams where communication was key to a successful outcome. These have included the Cost of Living Crisis Team, the Operation London Bridge Team, and the No. 10 Organization Page Redesign Team. These teams consisted of people from different teams in the GOV.UK programme of different disciplines and we had to work together to deliver to a deadline. For each response team I had to attend regular stand-ups where I would state how long I expected each assigned task would take and give updates on the progress I had made. I would regularly present prototypes of what I had been working on to the team so that designers could give feedback or make adjustments to their designs. Based on my knowledge of GOV.UK and previous experience with CMS architecture, I was able to delegate tasks to team members of different disciplines during my work on the No. 10 Organization Page. I worked together with the Delivery Manager and Tech Lead to split the implementation into tasks for developers, content editors and myself. As some of my tasks depended on work that could be done by publishing team developers, I had to communicate clearly what I needed to be delivered by them. While working on the No. 10 Organization page, I also worked together with a designer to create an acceptable compromise on what could be achieved in time we had. We discussed several alternative approaches to the banner of the page and I had to articulate the technical challenges that each one would pose in a way that could be understood by them and the SMT stakeholders. I also had to explain how parts of a proposed design were inaccessible and suggested adjustments.\\n\\nHave given talks about work I have done on GOV.UK Publishing Components to audiences including co-workers of different disciplines. I talked about the navbar in GOV.UK Show and Tell. This involved contacting other members of the team of different disciplines as I needed to understand their contributions to the project. The talk was delivered to a wide audience that did not necessarily understand the technical aspects of the component and so I had to adapt the talk to this. In addition I talked about my investigation into using ES6 modules in govuk_publishing_components in the GOV.UK Tech Fortnightly. This was to inform the wider tech community about what we could do if we did not need to support IE11 and how we could adopt more modern web practices. This audience included developers with no frontend experience so I had to cater the talk to this audience.\\n\\nTalked to Designers about a process of which they could raise issues with govuk_publishing_components by using GitHub issues. Some of them were not experienced with Github and previously unaware of this functionality so I had to explain it to them so that they could understand. They have now used this process to raise several issues which have been triaged and worked upon by myself and other developers.\\n\"},\"Leadership and guidance (Frontend developer)\":{\"Score\":\"3\",\"Evidence\":\"Have been drafted into multiple urgent response teams where I acted as the lead frontend developer. These have included the Cost of Living Crisis Team, the Operation London Bridge Team, the No. 10 Organisation Page Redesign and Emergency Alerts Global Bar deployment. I had to make decisions based on my knowledge of existing code, GOV.UK architecture and the time we had to complete the project. For the Cost of Living Crisis Team and Operation London Bridge, most of my work was implementing designs and presenting prototypes to designers for feedback. I also had to estimate the time required for implementation for the delivery managers on those projects. In all cases I was able to deliver the finished products ahead of schedule. For the No. 10 Organisation Page redesign, I was involved in determining the delivery of the project as well as the frontend implementation. I worked together with the Delivery Manager and Tech Lead to split the implementation into tasks for developers, content editors and myself. In addition, I also worked together with a designer to create an acceptable compromise on what could be achieved in time we had. We discussed several alternative approaches to the banner of the page and I had to articulate the technical challenges that each one would pose in a way that could be understood by them and the SMT stakeholders. I also had to explain how parts of a proposed design were inaccessible and suggested adjustments.\\n\\nHave helped other developers not as experienced with Ruby. I have the most Ruby experience of the Frontend developers on my team and have been able to answer questions asked of me.\\n\\nHave helped other backend developers with frontend questions. Worked together with a senior backend developer when they needed help with frontend specific tasks. what classes should be used on an element during the move of service manual pages from one application to another. Worked together with our Tech Lead on Javascript and tests; when they were working on dismissable intervention banner using cookies\\n\\nTalked to Designers about a process of which they could raise issues with govuk_publishing_components by using GitHub issues. They have used to raise several issues which have been triaged and worked on as a result of this new process.\\n\\nI am able to use my knowledge of GOV.UK architecture and programme team structure to be able to advise our team delivery and product leads that work should be delegated to other teams. There have been several instances of tasks which I determined would be in the remit of the publishing team that were assigned to our team. In another instance, I proposed that a task that involved form validation actually involved moving one aspect of an application we were responsible to another application that another team was responsible for. I was able to back up this proposal with evidence of precedent and the other team was convinced to take on the task.\",\"Comments\":\"Personally I feel for a ‘non-senior’ frontend developer, I have been put into situations where I have been working above my ‘mid-weight’ level. For the urgent response teams I had to assume a high level of responsibility (the entire frontend implementation, accessibility consulting and delivery consulting) and so I feel a 3 is justified here.\"},\"Strategic thinking (Frontend developer)\":{\"Score\":\"3\",\"Evidence\":\"When adding a promo banner to pages in the frontend app, I noticed that the content of the banner was hardcoded in separate partials all using the same mark-up. Therefore I moved the content to a .yml file and created one partial that could be used by all pages. This means the next time a promo has to be added, all that needs to be done is updating the .yml.\\n\\nWhen changing how errors were displayed on the location form in frontend, I saw instances of duplicated code over several templates. I merged templates and deleted repeated code (rather than putting the error message on the existing partials without consolidating functionality). \\n\\nWhen I had to move the header component outside of the main section of manual pages, I noticed that there was a lot of duplication. Instead of moving the component on all the templates it appeared on, I consolidated the code common to all partials thus making the pages more maintainable.\\n\\nI am able to use my knowledge of GOV.UK architecture and GOV.UK programme team structure to be able to advise my team leads that work should be delegated to other teams. We are frequently assigned tickets for feature requests and bugs that are the remit of the publishing team. Recent examples have been a request to add anchor links for all H2s for a page, a bug where a particular button with a nested abbreviation element would not style correctly and adding tag components to tables. For each of these I was able to determine that the changes had to take place in Whitehall because what needed to be changed was how the content was being saved to the content store by our content editing tools. I also was able to propose potential solutions to this issues in Whitehall and which were then forwarded to the publishing team.\\n\\nI determined that a task that involved implementing form validation actually involved moving one aspect of an application we were responsible to another application that another team was responsible for. To come to this conclusion, I investigated how forms were implemented on GOV.UK. The only other forms I could find were in a different application called feedback. This application was responsible for all contact forms on GOV.UK and contained all the validation lacking from the form I was tasked to fix. I argued it would be a more maintainable solution to move the form to feedback rather than implementing validation in the application it was currently in. Feedback was purpose built for running forms on GOV.UK and so already had the validation needed. As a result of my findings this task was reassigned.\\n\\nDevised a Frontend Checklist with my team which we use to test the accessibility of every new component or feature. The checklist includes assistive technology used by our users, accessibility checking tools and different devices and operating systems. Going forward this checklist was added as one of the mandatory checks when implementing a new frontend feature.\\n\",\"Comments\":\"I would argue I’ve played a significant role in determining what my team has to work on, how our team works on frontend tasks and have reduced a large amount of tech debt in the applications we are responsible for. There were tasks I have been able to reassign to other teams because of my knowledge of CMSs and GOV.UK even before any member of my team had to start work on them.\"},\"Accessibility\":{\"Evidence\":\"Collaborated with the GOV.UK Senior Accessibility Specialist to test changes to Navbar using Dragon assistive technology and consulted with them on solutions I had devised to solve accessibility issues\\n\\nDevised a Frontend Checklist with my team which we use to test the accessibility of every new component or feature. The checklist includes assistive technology used by our users, accessibility checking tools and different devices and operating systems. Meant that for every new feature our team worked on, we could keep track of what we had tested in the event that the person testing was absent for any reason. Recording the results meant that another developer could review and we could easily discuss any issues we found. Led to discovery of an accessibility issue that might not have been found if we did not have the Frontend Checklist, as it lists all the possible accessibility checks we need to do on a feature and means we do not miss out anything before a feature gets released.\\n\\nSolved several accessibility issues on GOV.UK outlinted by the accessibility audit using my knowledge of accessibility standards and technical constraints. These have included; making sure that the location form on GOV.UK displays an accessible error in every instance it used; increasing the clickable area of links in the navbar on GOV.UK, making it easier to use for users with a touch screen or who have difficulty using a mouse accurately to navigate; updating the Cost of Living Hub banner to use correct colour contrast for links to bring it to AAA accessibility standards; and determining the best way to improve accessibility on a search facet was to remove the text filter from the facet entirely. \\n\\nPreemptively can suggest areas in a design where accessibility could be improved. This included advising not to style a link to resemble a button for the subscription links component restyle, this is an accessibility issue because it masks the functionality of the link and results in unexpected behavior on click. In addition, I suggested how to amend the design for Youtube Embed on the Image Card component so that if Javascript was turned off the user could still focus the link to Youtube. I proposed adding text underneath the fallback image because we don’t currently have focus styles for non-text links and with the additional text we could still have a focusable element and also have a text link in the event the image failed to load. This was accepted by the designer and made it into the final implementation.\\n\",\"Comments\":\"I have thoroughly accessibility tested any new features I have contributed during my time at GOV.UK. In addition I have been consulted for my knowledge on accessibility by designers while working on projects and have solved several accessibility issues on existing components. I have also been an advocate for accessibility testing on my team. The devising of a frontend accessibility checklist made accessibility testing part of the standard process when developing a new feature.\",\"Score\":\"2\"},\"Web Performance Optimisation\":{\"Comments\":\"I believe a 3 is justified here because I have spearheaded two research projects with the goal to improve performance on GOV.UK. For both of these projects I meticulously researched in order to provide evidence for changes in the build pipeline of all frontend applications on GOV.UK. This level of analysis and proposed overhauling of processes goes beyond small fixes to performance in individual pages. In addition I managed to contribute a sitewide memory usage reduction by reducing click listeners. \",\"Score\":\"3\",\"Evidence\":\"Spiked into how we could use .webp image formats on GOV.UK. This is a modern image format that results in images of much smaller sizes than .png or .jpeg without much loss in image quality. Implemented a prototype of the frontend application if it used .webp images instead of .jpg images. This involved batch converting all the images on frontend and changing all references to them in the code. I then created a spreadsheet which compared the size of each image before and after compression and calculated the average percentage reduction in file size. Additionally ran comparisons on how fast a page with images loaded in the currently deployed version of GOV.UK using the Network tab of Google Chrome. I also experimented with Github actions to nightly submit PRs of compressed images that had been committed or amend PRs that had been opened by a user with images in it that could be compressed further.\\n\\nWas able to significantly reduce the number of Javascript listeners on the footer component by using the click bubbling instead of adding a click listener to each link of a component. Using the Memory tab in Chrome I compared the number of click event listeners on the page before and after the changes I had made. From comparing the snapshots I could see I had reduced the number of listeners on a component by 31. As the footer is a site-wide component, this change meant that memory usage was decreased on all pages which means the site will run more efficiently on lower specced devices.\\n\\nSpiked into how we could use modules in the govuk_publishing_components library to improve performance by decreasing JS size. Devised a new solution in which instead of all the JS for an application being loaded on every page, the JS is embedded in each component partial. As a result the JS for a component is only loaded when a component is used on the page which results in a smaller amount of JS needing to be downloaded on every page on GOV.UK. To test the performance I built a prototype with the changes I made. The prototype involved converting component JS into individual modules and modifying an application’s application.js to stop importing component JS from the gem. Using the Chrome Network tab on a page I could see that application.js size is halved when using individual JS files and the coverage (the amount of JS used) of application.js increasing from 13.5%. \"}}",
        "LineManagerApproved": "Yes",
        "LMEmail": "patrick.cartlidge@digital.cabinet-office.gov.uk"
    }
]